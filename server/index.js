/* eslint-disable no-console */

import express from 'express';
import fs from 'fs';
import path from 'path';
import compression from 'compression';
import bodyParser from 'body-parser';
import { resolve as pathResolve } from 'path';
import appRootDir from 'app-root-dir';
import Parse from 'parse/node';
import { isProd } from 'utils/env';

import config from 'config';

import reactApplication from './middleware/reactApplication';
import security from './middleware/security';
import clientBundle from './middleware/clientBundle';
import serviceWorker from './middleware/serviceWorker';
import offlinePage from './middleware/offlinePage';
import errorHandlers from './middleware/errorHandlers';
import { log } from '../internal/utils';
import controllers from './controllers';

const cookiesMiddleware = require('universal-cookie-express');
const cookieParser = require('cookie-parser');

Parse.initialize(config('urls.APP_ID'), null);
Parse.serverURL = config('urls.APP_URL');

// Create our express based server.
const app = express();
app.set('view engine', 'ejs');

app.set('views', pathResolve(appRootDir.get(), 'server/views'));

// Don't expose any software information to potential hackers.
app.disable('x-powered-by');

app.use(cookieParser());
app.use(cookiesMiddleware());
// Security middlewares.
app.use(...security);
// Gzip compress the responses.
app.use(compression());

// Register our service worker generated by our webpack config.
// We do not want the service worker registered for development builds, and
// additionally only want it registered if the config allows.
if (
  process.env.BUILD_FLAG_IS_DEV === 'false' &&
  config('serviceWorker.enabled')
) {
  app.get(`/${config('serviceWorker.fileName')}`, serviceWorker);
  app.get(
    `${config('bundles.client.webPath')}${config(
      'serviceWorker.offlinePageFileName',
    )}`,
    offlinePage,
  );
}

// Configure serving of our client bundle.
app.use(config('bundles.client.webPath'), clientBundle);
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Configure static serving of our "public" root http path static files.
// Note: these will be served off the root (i.e. '/') of our application.
app.use(
  express.static(pathResolve(appRootDir.get(), config('publicAssetsPath'))),
);

app.get('/reddit', (req, res) => {
  res.render('reddit', {
    url: req.query.url,
  });
});

app.get('/privacy', (req, res) => {
  res.render('legal/privacy');
});

app.get('/privacy.html', (req, res) => {
  res.render('legal/privacy');
});

app.get('/terms', (req, res) => {
  res.render('legal/terms');
});

app.get('/terms.html', (req, res) => {
  res.render('legal/terms');
});

app.get('/googled8b99a2e2c074c7d.html', (req, res) => {
  res.send('google-site-verification: googled8b99a2e2c074c7d.html');
});

app.get('/files/:file', (req, res) => {
  const url = `${config('aws.exportBucketURL')}${req.params.file}`;
  res.redirect(url);
});

app.get('/icons/:file', (req, res) => {
  const url = `${config('aws.iconsBucketURL')}${req.params.file}`;
  res.redirect(url);
});

app.get('/fb_login', (req, res) => {
  res.render('fb_login');
});

app.get('/ads/coinfantasy', (req, res) => {
  res.render('ads/coinfantasy');
});

app.get('/oauth/twitter/request', controllers.twitter.tokenRequest);
app.get('/oauth/twitter/callbackV2', controllers.twitter.oAuthCallback);

app.get('/oauth/coinbase/request', controllers.coinbase.tokenRequest);
app.get('/oauth/coinbase/callback', controllers.coinbase.oAuthCallback);
app.post('/oauth/coinbase/wallet', controllers.coinbase.coinbaseOAuth);

app.post('/unsubscribe', controllers.unsubscribeEmail.writeEmailInFile);

app.get('/get', (request, response) => {
  const userAgentData = request.headers['user-agent'].toLowerCase().split(' ');
  if (userAgentData.indexOf('android') >= 0) {
    response.redirect(302, 'https://play.google.com/store/apps/details?id=com.coinstats.crypto.portfolio');
  } else if (userAgentData.indexOf('iphone') >= 0) {
    response.redirect(302, 'https://itunes.apple.com/us/app/coin-stats-btc-eth-xrp-prices-and-altfolio/id1247849330?mt=8');
  } else {
    response.redirect(302, 'https://coinstats.app/');
  }
});

// The React application middleware.
app.get('*', (request, response) => {
  log({
    title: 'Request',
    level: 'special',
    message: `Received for "${request.url}"`,
  });

  return reactApplication(request, response);
});

// Error Handler middlewares.
app.use(...errorHandlers);

// Create an http listener for our express app.
const listener = app.listen(config('port'), () =>
  log({
    title: 'server',
    level: 'special',
    message: `âœ“

      ${config('welcomeMessage')}

      ${config('htmlPage.defaultTitle')} is ready!

      with

      Service Workers: ${config('serviceWorker.enabled')}
      Polyfills: ${config('polyfillIO.enabled')} (${config('polyfillIO.features').join(', ')})

      Server is now listening on Port ${config('port')}
      You can access it in the browser at http://${config('host')}:${config('port')}
      Press Ctrl-C to stop.
    `,
  }),
);

// We export the listener as it will be handy for our development hot reloader,
// or for exposing a general extension layer for application customisations.
export default listener;
